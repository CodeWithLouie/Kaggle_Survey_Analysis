)
}
Adult_Child <- NULL #create a null file
for (i in 1:nrow(train.test)) {
Adult_Child <- c(Adult_Child, chAdult_func(train.test[i, "Age"]))
}
# create a new column and add the Adult_Child vector
train.test <- train.test %>%
mutate(Age_group = Adult_Child)
# call summary on the new variable
table(train.test$Age_group)
# create a childadult_function
chAdult_func <- function(x) {
case_when(
x <= 13 ~ "Child",
x>= 13 & x <= 19 ~ "Teenager" ~ TRUE ~ "Adult"
)
}
Adult_Child <- NULL #create a null file
for (i in 1:nrow(train.test)) {
Adult_Child <- c(Adult_Child, chAdult_func(train.test[i, "Age"]))
}
# create a childadult_function
chAdult_func <- function(x) {
case_when(
x <= 13 ~ "Child",
x>= 13 & x <= 19 ~ "Teenager", TRUE ~ "Adult"
)
}
Adult_Child <- NULL #create a null file
for (i in 1:nrow(train.test)) {
Adult_Child <- c(Adult_Child, chAdult_func(train.test[i, "Age"]))
}
# create a new column and add the Adult_Child vector
train.test <- train.test %>%
mutate(Age_group = Adult_Child)
# call summary on the new variable
table(train.test$Age_group)
ggplot(train.test[1:891, ], aes(Age_group, fill = Survived)) +
geom_bar() +
facet_wrap(~ Pclass) +
ggtitle("Age Group Survival Across Pclass")
ggplot(train.test[1:891, ], aes(Age_group, fill = Survived)) +
geom_bar() +
facet_wrap(~ Pclass ~ SibSp) +
ggtitle("Age Group Survival by SibSp Across Pclass")
# create a vector of the sibsp and parch variable and add them together
train.temp <- c(train$SibSp, test$SibSp)
test.temp <- c(test$Parch, train$Parch)
train.test <- train.test %>%
mutate(Family_size = as.factor(train.temp + test.temp + 1))
ggplot(train.test[1:891, ], aes(Age_group, fill = Survived)) +
geom_bar() +
facet_wrap(~ Family_size) +
ggtitle("Age vs Survived by Family Size")
library(ranger)
library(randomForest)
args(ranger)
rf.train1 <- train.test[1:891, c("Sex", "Pclass", "Age_group", "Family_size")]
rf.train2 <- train.test[1:891, c("Sex", "Pclass", "Age_group")]
set.seed(2022)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
rf.label <- as.factor(train$Survived)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model
model2
model
varImpPlot(model) # this has more accuracy
set.seed(2022)
rf.test <- train.test[892:1309, c("Sex", "Pclass", "Age_group", "Family_size")]
prediction <- predict(model, rf.test)
table(prediction)
submission.file <- data.frame(PassengerId = rep(892:1309), Survived = prediction)
View(submission.file)
write_csv(submission.file, "Titanic-Randomforest-prediction-2022.csv")
source("~/Data Science Workspace/Data-Science-With-R/Titanic Disaster Prediction - Kaggle Submission/titanic.Rmd")
source("~/Data Science Workspace/Data-Science-With-R/Titanic Disaster Prediction - Kaggle Submission/titanic.Rmd")
knit_with_parameters("~/Data Science Workspace/Data-Science-With-R/Titanic Disaster Prediction - Kaggle Submission/titanic.Rmd")
rf.train1 <- train.test[1:891, c("Sex", "Pclass", "Age_group", "Family_size")]
rf.train2 <- train.test[1:891, c("Sex", "Pclass", "Age", "Family_size")]
set.seed(2022)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model
model2
model2
?randomForest
getTree(model)
getTree(model, k = 1, labelVar = TRUE)
rf.train2 <- train.test[1:891, c("Sex", "Pclass","Family_size")]
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model <- randomForest(rf.train1, rf.label, importance = TRUE, ntree = 200)
model2 <- randomForest(rf.train2, rf.label, importance = TRUE, ntree = 200)
model
model2
rf.label <- as.factor(train$Survived)
setwd("~/Data Science Workspace/Data-Science-With-R/Nigeria Car Price Prediction")
library(readr)
library(dplyr)
car.price <- read_csv('Nigerian_Car_Prices.csv')
car.price <- read_csv('Nigerian_Car_Prices.csv')
gc()
glimpse(car.price)
unique(car.price$Make)
car.price %>%
group_by(Make) %>%
count()
car.price %>%
group_by(Make) %>%
count() %>%
arrange(desc(Make))
car.price %>%
group_by(Make) %>%
arrange(desc(Make)) %>%
count()
car.price %>%
group_by(Make) %>%
summarise(Total = n()) %>%
arrange(desc())
car.price %>%
group_by(Make) %>%
summarise(Total = n()) %>%
arrange(desc(Total))
library(assertive)
car.price %>%
assert_all_are_not_na()
car.price %>%
assert_all_are_not_na() %>%
count()
car.price %>%
group_by(Make, Fuel, Condition, `Engine Size`) %>%
summarise(Total = n()) %>%
arrange(desc(Total))
car.price %>%
filter(Condition == NA) %>%
count()
car.price %>%
filter(is.na()) %>%
count()
car.price %>%
filter(is.na())
car.price %>%
filter(is.na(Condition))
car.price %>%
filter(is.na(Condition)) %>%
count()
library(readr)
library(dplyr)
car.price <- read_csv('Nigerian_Car_Prices.csv')
glimpse(car.price)
car.price %>%
group_by(Make, Fuel, Condition, `Engine Size`) %>%
summarise(Total = n()) %>%
arrange(desc(Total))
library(assertive)
car.price %>%
filter(is.na(Condition)) %>%
count()
car.price %>%
filter(!is.na(Condition)) %>%
count()
car.price.not_NA <- car.price %>%
filter(!is.na(Condition))
View(car.price.not_NA)
library(stringr)
car.price.filtered <- car.price.not_NA %>%
mutate(New_Build = str_replace_na(replacement = "Not Available"))
car.price.filtered <- car.price.not_NA %>%
mutate(New_Build = str_replace_na(Build, replacement = "Not Available"))
is.na(car.price.filtered$New_Build)
count(is.na(car.price.filtered$New_Build))
car.price.filtered %>%
filter(is.na(New_Build)) %>%
count()
View(car.price.filtered)
car.price.filtered %>%
group_by(New_Build) %>%
count()
car.price.filtered %>%
group_by(Make) %>%
count()
car.price.filtered %>%
group_by(Make) %>%
count() %>%
arrange(desc())
car.price.filtered %>%
group_by(Make) %>%
count() %>%
arrange(desc(n))
car.price.filtered %>%
group_by(`Year of manufacture`) %>%
count()
car.price.filtered %>%
group_by(`Year of manufacture`) %>%
count() %>%
arrange(desc(n))
car.price.filtered %>%
group_by(Condition) %>%
count()
car.price.filtered %>%
group_by(Mileage) %>%
count()
Name = "John"
if (Name == "John") {
print("Welcome" + " " Name)
if (Name == "John") {
print("Welcome", + " ",Name)
}
if (Name == "John") {
print("Welcome")
}
if (Name == "John") {
print("Welcome" + Name)
}
if (Name == "John") {
print("Welcome" + str(Name))
}
?if
if (Name == "John") {
if (Name == "John") {
print("Welcome")
else
if (Name == "John") {
print("Welcome")
}
else {
if (Name == "John") {
print("Welcome")
else {
if (Name == "John") {
print("Welcome")
else {
ifelse (Name == "John", "Welcome", "Invalid User")
ifelse (Name == "John", "Welcome", "Invalid User")
Name = "ohn"
ifelse (Name == "John", "Welcome", "Invalid User")
Name = "John"
ifelse (Name == "John", "Welcome", "Invalid User")
Name <- "John"
Name <- "John"
if (Name == "John") {
print("You May Proceed!")
} else {
print("Red Alert! Intruder!!!!!")
}
Name <- "Jae"
if (Name == "John") {
print("You May Proceed!")
} else {
print("Red Alert! Intruder!!!!!")
}
if (Name == "John") {
print("You May Proceed!")
print("Welcome John")
} else {
print("Red Alert! Intruder!!!!!")
}
Name <- "John"
if (Name == "John") {
print("You May Proceed!")
print("Welcome John")
} else {
print("Red Alert! Intruder!!!!!")
}
Name <- "John"
if (Name == "John") {
print("You May Proceed!")
print("Welcome John")
} else {
print("Red Alert! Intruder!!!!!")
print("Shutdown All Entrances & Exit Immediately!!!!!!!!!!!")
}
Name <- "Joh"
if (Name == "John") {
print("You May Proceed!")
print("Welcome John")
} else {
print("Red Alert! Intruder!!!!!")
print("Shutdown All Entrances & Exit Immediately!!!!!!!!!!!")
}
if (Name == "John") {
print("You May Proceed!")
print("Welcome", " ", Name)
} else {
print("Red Alert! Intruder!!!!!")
print("Shutdown All Entrances & Exit Immediately!!!!!!!!!!!")
}
Name <- "John"
if (Name == "John") {
print("You May Proceed!")
print("Welcome", " ", Name)
} else {
print("Red Alert! Intruder!!!!!")
print("Shutdown All Entrances & Exit Immediately!!!!!!!!!!!")
}
Name <- "John"
if (Name == "John") {
print("You May Proceed!")
print("Welcome")
Name = Name
} else {
print("Red Alert! Intruder!!!!!")
print("Shutdown All Entrances & Exit Immediately!!!!!!!!!!!")
}
Name <- "John"
if (Name == "John") {
print("You May Proceed!")
print("Welcome")
return(NULL)
} else {
print("Red Alert! Intruder!!!!!")
print("Shutdown All Entrances & Exit Immediately!!!!!!!!!!!")
}
if (Name == "John") {
if (Name == "John") {
Name <- "John"
if (Name == "John") {
print("Welcome")
} else if (Name != "John) {
print("Shutdown All Entrances & Exit Immediately!!!!!!!!!!!")
if (Name == "John") {
print("You May Proceed!")
print("Welcome")
} else
Age = 20
Age = 20
Age = (20,19, 17, 13, 16)
Age = (20,19, 17, 13, 16)
Age = (20, 19, 17, 13, 16)
Age = c(20, 19, 17, 13, 16)
if (Age <= 19) {
print(T"Teenager")
if (Age <= 19) {
print("Teenager")
} else {
print("Adult")
}
for (age_grp in Age) {
if (Age <= 19) {
print("Teenager")
} else {
print("Adult")
}
}
for (age_grp in Age) {
if (Age <= 19) {
print("Teenager")
}
}
for (age_grp in Age) {
if (Age <= 19) {
print("Teenager")
}
}
for (age_grp in Age) {
print(age_grp)
}
for (age_grp in Age) {
if (age_grp <= 19) {
print("Teenager")
}
}
for (age_grp in Age) {
if (age_grp <= 19) {
print("Teenager")
} else {
print("Adult")
}
}
gc()
A = 12
while (A <= 12) {
print("This is a Child")
A = A + 1
}
while (A <= 12) {
print("This is a Child")
A = A + 1
}
while (A <= 12) {
print("This is a Child")
A = A + 1
}
A = 10
while (A <= 12) {
print("This is a Child")
A = A + 1
}
A = 1
while (A <= 12) {
print("This is a Child")
A = A + 1
}
A = 0
while (A <= 12) {
print("This is a Child")
A = A + 1
}
gc()
library(dplyr)
library(readr)
library(stringr)
library(ggplot2);theme_set(theme_minimal())
kaggle <- read_csv("kagglesurvey.csv")
setwd("~/Data Science Workspace/Kaggle_Survey_Analysis")
kaggle <- read_csv("kagglesurvey.csv")
View(kaggle); glimpse(kaggle)
kaggle %>%
group_by(LanguageRecommendationSelect) %>%
count() %>%
arrange(desc(n))
multiple_tools <- kaggle %>%
mutate(
Tools = case_when(
WorkToolsSelect == "R" & WorkToolsSelect != "Python" ~ "R",
WorkToolsSelect == "Python" & WorkToolsSelect != "R" ~ "Python",
#WorkToolsSelect == "R" & WorkToolsSelect == "Python" ~ "Both",
WorkToolsSelect != "R" & WorkToolsSelect != "Python" ~ "Others"
)
)
View(multiple_tools)
multiple_tools <- kaggle %>%
mutate(
Tools = case_when(
str_detect(WorkToolsSelect == "R" & WorkToolsSelect != "Python") ~ "R",
str_detect(WorkToolsSelect == "Python" & WorkToolsSelect != "R") ~ "Python",
str_detect(WorkToolsSelect == "R" & WorkToolsSelect == "Python") ~ "Both",
str_detect(WorkToolsSelect != "R" & WorkToolsSelect != "Python") ~ "Others"
)
)
multiple_tools <- kaggle %>%
mutate(
Tools =
str_detect(WorkToolsSelect == "R" & WorkToolsSelect != "Python") ~ "R",
str_detect(WorkToolsSelect == "Python" & WorkToolsSelect != "R") ~ "Python",
str_detect(WorkToolsSelect == "R" & WorkToolsSelect == "Python") ~ "Both",
str_detect(WorkToolsSelect != "R" & WorkToolsSelect != "Python") ~ "Others"
)
multiple_tools <- kaggle %>%
mutate(
Tools =case_when(
str_detect(WorkToolsSelect == "R" & WorkToolsSelect != "Python") ~ "R",
str_detect(WorkToolsSelect == "Python" & WorkToolsSelect != "R") ~ "Python",
str_detect(WorkToolsSelect == "R" & WorkToolsSelect == "Python") ~ "Both",
str_detect(WorkToolsSelect != "R" & WorkToolsSelect != "Python") ~ "Others"
)
)
View(multiple_tools)
args(case_when)
?case_when
multiple_tools <- kaggle %>%
mutate(
Tools =case_when(
str_detect(WorkToolsSelect == "R" & WorkToolsSelect != "Python") ~ "R",
str_detect(WorkToolsSelect == "Python" & WorkToolsSelect != "R") ~ "Python",
str_detect(WorkToolsSelect == "R" & WorkToolsSelect == "Python") ~ "Both",
str_detect(WorkToolsSelect != "R" & WorkToolsSelect != "Python") ~ "Others"
)
)
multiple_tools <- kaggle %>%
mutate(
Tools =case_when(
WorkToolsSelect == "R" & WorkToolsSelect != "Python" ~ "R",
WorkToolsSelect == "Python" & WorkToolsSelect != "R" ~ "Python",
WorkToolsSelect == "R" & WorkToolsSelect == "Python" ~ "Both", TRUE ~ "Others"
)
)
View(multiple_tools)
kaggle %>%
group_by(LanguageRecommendationSelect) %>%
count() %>%
arrange(desc(n))
View(kaggle)
/str_detect
?str_detect
library(dplyr)
library(readr)
library(stringr)
library(ggplot2);theme_set(theme_minimal())
multiple_tools <- kaggle %>%
mutate(
Tools =case_when(
str_detect(WorkToolsSelect, "R") & !str_detect(WorkToolsSelect, "Python") ~ "R",
str_detect(WorkToolsSelect, "Python") & !str_detect(WorkToolsSelect, "R") ~ "Python",
str_detect(WorkToolsSelect, "R") & str_detect(WorkToolsSelect, "Python") ~ "Both", ~
TRUE ~ "Others"
)
)
multiple_tools <- kaggle %>%
mutate(
Tools =case_when(
str_detect(WorkToolsSelect, "R") & !str_detect(WorkToolsSelect, "Python") ~ "R",
str_detect(WorkToolsSelect, "Python") & !str_detect(WorkToolsSelect, "R") ~ "Python",
str_detect(WorkToolsSelect, "R") & str_detect(WorkToolsSelect, "Python") ~ "Both",
!str_detect(WorkToolsSelect, "R") & !str_detect(WorkToolsSelect, "Python") ~ "Others"
)
)
multiple_tools %>%
count(Tools) %>%
group_by(Tools) %>%
ggplot(aes(reorder(Tools, n), n), fill = ) +
geom_col()
multiple_tools %>%
count(Tools) %>%
group_by(Tools) %>%
ggplot(aes(reorder(Tools, n), n)) +
geom_col() +
coord_flip()
